<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>CSS & JS Animation Project</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <h1>Interactive Animation Showcase</h1>

  <!-- Part 1: CSS Transitions & Animations -->
  <button class="hover-button">Hover Me</button>
  <div class="animated-box"></div>

  <!-- Part 2: JS Functions -->
  <div>
    <h2>Calculate Area</h2>
    <button onclick="showArea(5, 10)">Calculate Area of 5x10</button>
    <p id="areaResult"></p>
  </div>

  <!-- Part 3: JS + CSS Animation -->
  <button id="triggerAnimation">Animate Box</button>
  <div id="triggerBox" class="box"></div>

  <!-- Modal Example -->
  <button id="openModal">Open Modal</button>
  <div id="modal" class="modal">
    <div class="modal-content">
      <span id="closeModal">&times;</span>
      <p>This is a sliding modal!</p>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>

body {
  font-family: sans-serif;
  padding: 20px;
}

/* Part 1: Hover Button */
.hover-button {
  padding: 10px 20px;
  background-color: #3498db;
  color: white;
  border: none;
  transition: background-color 0.3s ease;
}
.hover-button:hover {
  background-color: #2ecc71;
}

/* Animated Box */
.animated-box {
  width: 100px;
  height: 100px;
  background-color: coral;
  margin-top: 20px;
  animation: pulse 2s infinite;
}
@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.2); }
  100% { transform: scale(1); }
}

/* Part 3: Triggered Animation */
.box {
  width: 100px;
  height: 100px;
  background-color: purple;
  margin-top: 20px;
}
.animate {
  animation: slideFade 1s forwards;
}
@keyframes slideFade {
  0% { opacity: 0; transform: translateY(-50px); }
  100% { opacity: 1; transform: translateY(0); }
}

/* Modal Styles */
.modal {
  display: none;
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.5);
  animation: fadeIn 0.5s ease;
}
.modal-content {
  background: white;
  margin: 15% auto;
  padding: 20px;
  width: 300px;
  animation: slideIn 0.5s ease;
}
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}
@keyframes slideIn {
  from { transform: translateY(-100px); }
  to { transform: translateY(0); }
}

// 🔧 Part 2: Functions with Parameters & Return Values

// Global variable
let globalMultiplier = 2;

// Function to calculate area
function calculateArea(width, height) {
  // Local scope variable
  let area = width * height;
  return area * globalMultiplier;
}

// Function to display result
function showArea(w, h) {
  const result = calculateArea(w, h);
  document.getElementById("areaResult").textContent = `Scaled Area: ${result}`;
}

// 🔁 Reusable function to add animation class
function triggerAnimation(elementId, className) {
  const el = document.getElementById(elementId);
  el.classList.remove(className); // Reset if already applied
  void el.offsetWidth; // Force reflow
  el.classList.add(className);
}

// 🎬 Part 3: Trigger CSS Animation with JS
document.getElementById("triggerAnimation").addEventListener("click", () => {
  triggerAnimation("triggerBox", "animate");
});

// 🎭 Modal Logic
const modal = document.getElementById("modal");
const openBtn = document.getElementById("openModal");
const closeBtn = document.getElementById("closeModal");

openBtn.addEventListener("click", () => {
  modal.style.display = "block";
});

closeBtn.addEventListener("click", () => {
  modal.style.display = "none";
});

